// src/utils/indexedDB.ts
const DB_NAME = 'ProductivityAppDB';
const STORE_NAME = 'userSettings';

export const initDB = (): Promise<IDBDatabase> => {
  return new Promise((resolve, reject) => {
    const request = indexedDB.open(DB_NAME, 1);

    request.onupgradeneeded = (event) => {
      const db = (event.target as IDBOpenDBRequest).result;
      if (!db.objectStoreNames.contains(STORE_NAME)) {
        db.createObjectStore(STORE_NAME, { keyPath: 'id' });
      }
    };

    request.onsuccess = (event) => resolve((event.target as IDBOpenDBRequest).result);
    request.onerror = (event) => reject(`–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è IndexedDB: ${event}`);
  });
};

export const saveToDB = async (id: string, data: any): Promise<void> => {
  console.log('[IndexedDB] Saving:', { id, data }); // üëà –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
  const db = await initDB();
  const transaction = db.transaction(STORE_NAME, 'readwrite');
  const store = transaction.objectStore(STORE_NAME);
  const request = store.put({ id, data });

  return new Promise((resolve, reject) => {
    request.onsuccess = () => {
      console.log('[IndexedDB] –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ:', id); // ‚úÖ
      resolve();
    };
    request.onerror = (e) => {
      console.error('[IndexedDB] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', e); // ‚ùå
      reject(`–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ IndexedDB: ${e}`);
    };
  });
};

export const loadFromDB = async <T = any>(id: string): Promise<T | null> => {
  const db = await initDB();
  const transaction = db.transaction(STORE_NAME, 'readonly');
  const store = transaction.objectStore(STORE_NAME);
  const request = store.get(id);

  return new Promise((resolve, reject) => {
    request.onsuccess = () => {
      const result = request.result?.data || null;
      console.log('[IndexedDB] –ó–∞–≥—Ä—É–∂–µ–Ω–æ:', { id, result }); // üëà –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É
      resolve(result);
    };
    request.onerror = (e) => {
      console.error('[IndexedDB] –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è:', e);
      reject('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏–∑ IndexedDB');
    };
  });
};